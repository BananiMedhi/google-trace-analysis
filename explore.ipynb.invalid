{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python2.7/dist-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
<<<<<<< HEAD
    "import cPickle as pkl\n",
    "import h5py"
=======
    "import pickle as pkl\n",
    "import h5py\n",
    "from tqdm import tqdm"
>>>>>>> 9ca3b40755278d0f71e515e9a5685c99903906a5
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = \"./data/clusterdata-2011-2/\"\n",
    "\n",
    "task_events_header = ['timestamp','missing_info', 'job_id','task_index','machine_id','event_type',\n",
    "                      'user_name','sched_class','priority','cpu_req','ram_req','space_req','diff_machine']\n",
    "\n",
    "machine_events_header = ['timestamp','machine_id','event_type','platform_id','cpu_cap','mem_cap']\n",
    "\n",
    "task_usage_header = ['start_time','end_time','job_id','task_index','machine_id', 'mean_cpu_usage',\n",
    "                     'canon_memory_usage', 'assign_memory_usage', 'unmapped_cache', 'total_cache', \n",
    "                     'max_mem', 'mean_io', 'mean_space', 'max_cpu', 'max_io', 'cpi', 'mai', 'sample',\n",
    "                     'agg_type', 'sample_cpu_usage']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(data_dir+\"task_usage/part-00000-of-00500.csv.gz\",header=None)\n",
    "df.columns = task_usage_header"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    201491\n",
       "1    189994\n",
       "4     43237\n",
       "5     10505\n",
       "2      4338\n",
       "3       581\n",
       "Name: event_type, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# df[df['job_id'] == 3418309]\n",
    "df['event_type'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machines that are removed from the cluster were loaded more than X times their mean resource usage."
   ]
  },
  {
<<<<<<< HEAD
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "first_stamp = pd.read_csv(data_dir+\"task_usage/part-00000-of-00500.csv.gz\",header=None)\n",
    "mid_stamp = pd.read_csv(data_dir+\"task_usage/part-00050-of-00500.csv.gz\",header=None)\n",
    "last_stamp = pd.read_csv(data_dir+\"task_usage/part-00100-of-00500.csv.gz\",header=None)\n",
    "first_stamp.columns = task_usage_header\n",
    "mid_stamp.columns = task_usage_header\n",
    "last_stamp.columns = task_usage_header\n",
    "start_time = int(first_stamp.iloc[0]['start_time']/1000000)\n",
    "mid_time = int(mid_stamp.iloc[-1]['start_time']/1000000)\n",
    "end_time = int(last_stamp.iloc[-1]['start_time']/1000000)\n",
    "\n",
    "del first_stamp\n",
    "del mid_stamp\n",
    "del last_stamp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "hf = h5py.File('./data/time_stamps.h5','w')\n",
    "hf.create_dataset('time',data=[start_time,mid_time,end_time])\n",
    "hf.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Machine IDs of all machines in the first 100 task usage files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_machines = np.array([])\n",
    "for i in xrange(101):\n",
    "    print i\n",
    "    df = pd.read_csv(data_dir + \"task_usage/part-%05d-of-00500.csv.gz\" % i,header=None)\n",
    "    df.columns = task_usage_header\n",
    "    m = df.groupby('machine_id').size().reset_index(name='counts')\n",
    "    m_count = m[m['counts'] > 100]['machine_id']\n",
    "    all_machines = np.append(all_machines, m_count.values)\n",
    "\n",
    "all_machines = np.unique(all_machines)\n",
    "\n",
    "h5 = h5py.File('./data/machines_in_100','w')\n",
    "h5.create_dataset('ids', data=list(all_machines))\n",
    "h5.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hf = h5py.File('./data/machines_in_100','r')\n",
    "all_machines = np.array(hf['ids'])\n",
    "hf.close()\n",
    "\n",
    "hf = h5py.File('./data/time_stamps.h5','r')\n",
    "ts = np.array(hf['time'])\n",
    "hf.close()\n",
    "\n",
    "start_time = ts[0]\n",
    "end_time = ts[1]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "cols = range(start_time,end_time)\n",
    "machine_usage = pd.DataFrame(data=np.empty((len(all_machines),len(cols))), columns=cols,dtype=np.float16)\n",
    "machine_usage.index = np.array(all_machines)\n",
    "machine_usage.replace(0,np.nan,inplace=True)"
   ]
  },
  {
=======
>>>>>>> 9ca3b40755278d0f71e515e9a5685c99903906a5
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-278889bd1d8c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mfirst_stamp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_dir\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"task_usage/part-00000-of-00500.csv.gz\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mheader\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mmid_stamp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_dir\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"task_usage/part-00050-of-00500.csv.gz\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mheader\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mlast_stamp\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdata_dir\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"task_usage/part-00100-of-00500.csv.gz\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mheader\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mfirst_stamp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtask_usage_header\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mmid_stamp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtask_usage_header\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "first_stamp = pd.read_csv(data_dir+\"task_usage/part-00000-of-00500.csv.gz\",header=None)\n",
    "mid_stamp = pd.read_csv(data_dir+\"task_usage/part-00050-of-00500.csv.gz\",header=None)\n",
    "last_stamp = pd.read_csv(data_dir+\"task_usage/part-00100-of-00500.csv.gz\",header=None)\n",
    "first_stamp.columns = task_usage_header\n",
    "mid_stamp.columns = task_usage_header\n",
    "last_stamp.columns = task_usage_header\n",
    "start_time = int(first_stamp.iloc[0]['start_time']/1000000)\n",
    "mid_time = int(mid_stamp.iloc[-1]['start_time']/1000000)\n",
    "end_time = int(last_stamp.iloc[-1]['start_time']/1000000)\n",
    "\n",
    "del first_stamp\n",
    "del mid_stamp\n",
    "del last_stamp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Machine IDs of all machines in the first 100 task usage files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "73\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n"
     ]
    }
   ],
   "source": [
    "\n",
    "all_machines = np.array([])\n",
    "for i in xrange(101):\n",
    "    print i\n",
    "    df = pd.read_csv(data_dir + \"task_usage/part-%05d-of-00500.csv.gz\" % i,header=None)\n",
    "    df.columns = task_usage_header\n",
    "    m = df.groupby('machine_id').size().reset_index(name='counts')\n",
    "    m_count = m[m['counts'] > 100]['machine_id']\n",
    "    all_machines = np.append(all_machines, m_count.values)\n",
    "\n",
    "all_machines = np.unique(all_machines)\n",
    "hf = h5py.File('./data/machines_in_100.h5','w')\n",
    "hf.create_dataset('ids', data= all_machines.astype(np.int64))\n",
    "hf.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "hf = h5py.File('./data/machines_in_100.h5','r')\n",
    "all_machines = np.array(hf['ids'])\n",
    "hf.close()\n",
    "\n",
    "hf = h5py.File('./data/time_stamps.h5','r')\n",
    "ts = np.array(hf.get('time'))\n",
    "hf.close()\n",
    "\n",
    "start_time = ts[0]\n",
    "end_time = ts[1]\n",
    "\n",
    "cols = range(start_time,end_time)\n",
    "\n",
    "import gc\n",
    "gc.collect()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "machine_usage = pd.DataFrame(index=np.array(all_machines), columns=cols,dtype=np.float16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1):\n",
    "    df = pd.read_csv(data_dir + \"task_usage/part-%05d-of-00500.csv.gz\" % i,header=None)\n",
    "    df.columns = task_usage_header\n",
    "    df['start_time'] = df['start_time']/1000000\n",
    "    df['start_time'].astype(np.int)\n",
    "    df = df[df['machine_id'].isin(all_machines)].groupby(['machine_id','start_time']).sum()\n",
    "    for ind,row in tqdm(df.iterrows()):\n",
    "        machine_usage.loc[ind[0],ind[1]] = row['mean_cpu_usage']\n",
    "    del df\n",
    "    gc.collect()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "hf.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
<<<<<<< HEAD
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "501720.0\n",
      "501720.0\n",
      "501720.0\n"
     ]
    }
   ],
   "source": [
    "for index,row in df.iterrows():\n",
    "    if index > 2:\n",
    "        break\n",
    "    print row['start_time']/1000000"
=======
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_time</th>\n",
       "      <th>end_time</th>\n",
       "      <th>job_id</th>\n",
       "      <th>task_index</th>\n",
       "      <th>machine_id</th>\n",
       "      <th>mean_cpu_usage</th>\n",
       "      <th>canon_memory_usage</th>\n",
       "      <th>assign_memory_usage</th>\n",
       "      <th>unmapped_cache</th>\n",
       "      <th>total_cache</th>\n",
       "      <th>max_mem</th>\n",
       "      <th>mean_io</th>\n",
       "      <th>mean_space</th>\n",
       "      <th>max_cpu</th>\n",
       "      <th>max_io</th>\n",
       "      <th>cpi</th>\n",
       "      <th>mai</th>\n",
       "      <th>sample</th>\n",
       "      <th>agg_type</th>\n",
       "      <th>sample_cpu_usage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1403</th>\n",
       "      <td>600.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>1317485965</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000346</td>\n",
       "      <td>0.004303</td>\n",
       "      <td>0.005806</td>\n",
       "      <td>0.001474</td>\n",
       "      <td>0.001539</td>\n",
       "      <td>0.004387</td>\n",
       "      <td>0.000070</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.003662</td>\n",
       "      <td>0.005928</td>\n",
       "      <td>13.060</td>\n",
       "      <td>0.063290</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1993</th>\n",
       "      <td>600.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>1836173247</td>\n",
       "      <td>187</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000459</td>\n",
       "      <td>0.009705</td>\n",
       "      <td>0.013120</td>\n",
       "      <td>0.003429</td>\n",
       "      <td>0.003483</td>\n",
       "      <td>0.009781</td>\n",
       "      <td>0.000509</td>\n",
       "      <td>0.000162</td>\n",
       "      <td>0.001875</td>\n",
       "      <td>0.007431</td>\n",
       "      <td>7.558</td>\n",
       "      <td>0.034450</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2785</th>\n",
       "      <td>600.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>2859662171</td>\n",
       "      <td>15</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000823</td>\n",
       "      <td>0.001080</td>\n",
       "      <td>0.001919</td>\n",
       "      <td>0.000906</td>\n",
       "      <td>0.001072</td>\n",
       "      <td>0.001120</td>\n",
       "      <td>0.001270</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>0.004166</td>\n",
       "      <td>0.010210</td>\n",
       "      <td>16.420</td>\n",
       "      <td>0.079770</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3630</th>\n",
       "      <td>600.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>2902878580</td>\n",
       "      <td>48</td>\n",
       "      <td>5</td>\n",
       "      <td>0.010500</td>\n",
       "      <td>0.022800</td>\n",
       "      <td>0.026700</td>\n",
       "      <td>0.010070</td>\n",
       "      <td>0.022950</td>\n",
       "      <td>0.023040</td>\n",
       "      <td>0.006195</td>\n",
       "      <td>0.000037</td>\n",
       "      <td>0.065670</td>\n",
       "      <td>0.088260</td>\n",
       "      <td>2.275</td>\n",
       "      <td>0.005001</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7532</th>\n",
       "      <td>600.0</td>\n",
       "      <td>900.0</td>\n",
       "      <td>3128216606</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0.001591</td>\n",
       "      <td>0.008896</td>\n",
       "      <td>0.011630</td>\n",
       "      <td>0.001040</td>\n",
       "      <td>0.001068</td>\n",
       "      <td>0.008896</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>0.000075</td>\n",
       "      <td>0.004677</td>\n",
       "      <td>0.001928</td>\n",
       "      <td>9.661</td>\n",
       "      <td>0.043200</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.001276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      start_time  end_time      job_id  task_index  machine_id  \\\n",
       "1403       600.0     900.0  1317485965           3           5   \n",
       "1993       600.0     900.0  1836173247         187           5   \n",
       "2785       600.0     900.0  2859662171          15           5   \n",
       "3630       600.0     900.0  2902878580          48           5   \n",
       "7532       600.0     900.0  3128216606           1           5   \n",
       "\n",
       "      mean_cpu_usage  canon_memory_usage  assign_memory_usage  unmapped_cache  \\\n",
       "1403        0.000346            0.004303             0.005806        0.001474   \n",
       "1993        0.000459            0.009705             0.013120        0.003429   \n",
       "2785        0.000823            0.001080             0.001919        0.000906   \n",
       "3630        0.010500            0.022800             0.026700        0.010070   \n",
       "7532        0.001591            0.008896             0.011630        0.001040   \n",
       "\n",
       "      total_cache   max_mem   mean_io  mean_space   max_cpu    max_io     cpi  \\\n",
       "1403     0.001539  0.004387  0.000070    0.000151  0.003662  0.005928  13.060   \n",
       "1993     0.003483  0.009781  0.000509    0.000162  0.001875  0.007431   7.558   \n",
       "2785     0.001072  0.001120  0.001270    0.000029  0.004166  0.010210  16.420   \n",
       "3630     0.022950  0.023040  0.006195    0.000037  0.065670  0.088260   2.275   \n",
       "7532     0.001068  0.008896  0.000023    0.000075  0.004677  0.001928   9.661   \n",
       "\n",
       "           mai  sample  agg_type  sample_cpu_usage  \n",
       "1403  0.063290       0         1          0.000000  \n",
       "1993  0.034450       0         1          0.000000  \n",
       "2785  0.079770       0         1          0.000000  \n",
       "3630  0.005001       0         1          0.000000  \n",
       "7532  0.043200       0         0          0.001276  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['machine_id'] == 5].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['start_time'] = df['start_time']/1000000\n",
    "df['start_time'].astype(np.int)\n",
    "dummy = df[df['machine_id'].isin(all_machines)].groupby(['machine_id', 'start_time']).sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "(5, 600)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-72-e8e6b057282e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'machine_id'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0misin\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_machines\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'machine_id'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'start_time'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_group\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m5\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m600\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\groupby.py\u001b[0m in \u001b[0;36mget_group\u001b[1;34m(self, name, obj)\u001b[0m\n\u001b[0;32m    763\u001b[0m         \u001b[0minds\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_get_index\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    764\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minds\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 765\u001b[1;33m             \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    766\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    767\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_take\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0minds\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mconvert\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: (5, 600)"
     ]
    }
   ],
   "source": [
    "df[df['machine_id'].isin(all_machines)].groupby(['machine_id', 'start_time']).get_group((5,600))"
>>>>>>> 9ca3b40755278d0f71e515e9a5685c99903906a5
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>600</th>\n",
       "      <th>601</th>\n",
       "      <th>602</th>\n",
       "      <th>603</th>\n",
       "      <th>604</th>\n",
       "      <th>605</th>\n",
       "      <th>606</th>\n",
       "      <th>607</th>\n",
       "      <th>608</th>\n",
       "      <th>609</th>\n",
       "      <th>...</th>\n",
       "      <th>256162</th>\n",
       "      <th>256163</th>\n",
       "      <th>256164</th>\n",
       "      <th>256165</th>\n",
       "      <th>256166</th>\n",
       "      <th>256167</th>\n",
       "      <th>256168</th>\n",
       "      <th>256169</th>\n",
       "      <th>256170</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 255572 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   600     601     602     603     604     605     606     607     608     \\\n",
       "0     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n",
       "1     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n",
       "\n",
       "   609      ...    256162  256163  256164  256165  256166  256167  256168  \\\n",
       "0     NaN   ...       NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n",
       "1     NaN   ...       NaN     NaN     NaN     NaN     NaN     NaN     NaN   \n",
       "\n",
       "   256169  256170  0       \n",
       "0     NaN     NaN       0  \n",
       "1     NaN     NaN       0  \n",
       "\n",
       "[2 rows x 255572 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# machine_usage[0] = np.zeros_like((len(all_machines),1))\n",
    "machine_usage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5, 0.0006) 0.16278016\n",
      "(5, 0.0009) 0.16996117\n",
      "(5, 0.0012) 0.14658722\n"
     ]
    }
   ],
   "source": [
    "count =0\n",
    "for index,row in dummy.iterrows():\n",
    "    if count > 2:\n",
    "        break\n",
    "    count+=1\n",
    "    print(index,row['mean_cpu_usage'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
